# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['PlotMetrics', 'PlotMetricsEnd', 'PlotMetricsProgress']

# Cell
#hide
import tensorflow as tf
import matplotlib.pyplot as plt
from IPython.display import clear_output

# Cell
class PlotMetrics(tf.keras.callbacks.History):
    def __init__(self, figsize=(9, 4)):
        super(PlotMetrics, self).__init__()
        self.figsize = figsize
    def _get_unique_metrics(self):
        unique_names = [name for name in self.history.keys() if name[:4]!='val_']
        return unique_names

# Cell
class PlotMetricsEnd(PlotMetrics):
    def __init__(self, **kwargs):
        super(PlotMetricsEnd, self).__init__(**kwargs)

    def on_train_end(self, logs=None):
        unique_names = self._get_unique_metrics()
        fig, axes = plt.subplots(1, len(unique_names), figsize=self.figsize)
        for i, name in enumerate(unique_names):
            axes[i].plot(self.history[name], label='Train')
            axes[i].plot(self.history[f'val_{name}'], label='Validation')
            axes[i].set_title(name)
            axes[i].legend()
        plt.show()

# Cell
class PlotMetricsProgress(PlotMetrics):
    def __init__(self, **kwargs):
        super(PlotMetricsProgress, self).__init__(**kwargs)

    def on_epoch_end(self, epoch, logs=None):
        super().on_epoch_end(epoch, logs)
        unique_names = self._get_unique_metrics()
        fig, axes = plt.subplots(1, len(unique_names), figsize=self.figsize)
        for i, name in enumerate(unique_names):
            axes[i].plot(self.history[name], label='Train')
            axes[i].plot(self.history[f'val_{name}'], label='Validation')
            axes[i].set_title(name)
            axes[i].legend()
        plt.suptitle(f'Epoch {epoch+1}')
        clear_output()
        plt.show()